{
    "contents" : "corr <- function(directory, threshold = 0) {\n    ## 'directory' is a character vector of length 1 indicating\n    ## the location of the CSV files\n    \n    ## 'threshold' is a numeric vector of length 1 indicating the\n    ## number of completely observed observations (on all\n    ## variables) required to compute the correlation between\n    ## nitrate and sulfate; the default is 0\n    \n    ## Return a numeric vector of correlations\n    ## NOTE: Do not round the result!\n    #     completeCounts <- complete(directory)\n    #     notvalid <- is.na(completeCounts[,2])\n    #     completeValidCounts <- completeCounts[!notvalid,]\n    #     aboveThreshold <- completeValidCounts[,2] > threshold\n    #     completeAboveCounts <- completeValidCounts[aboveThreshold,]\n    allEntries <- c()\n    corrResults <- c()    \n    if (threshold >= 0) {\n        \n        \n        \n        completeAboveCounts <- filesWithCompleteCases(directory,threshold)\n        \n        #correlation <- cor(compAboveCounts[,1],compAboveCounts[,2])\n        #correlation\n        #completeAboveCounts\n        \n        #print(length(completeAboveCounts))\n        if (length(completeAboveCounts) > 0) {\n            for(i in 1:nrow(completeAboveCounts)) {\n                #print(\"Must be some data in completeAboveCounts\")\n                row <- completeAboveCounts[i,]\n                #frame <- getCompleteCasesWithThreshold(directory, threshold, i)\n                frame <- getCompleteCases(directory, row[1])\n                #frame <- getCompleteCases(directory, 1)\n                #print(data)\n                #d <- data.frame(data[1],data[2])\n                #if (threshold > 0) {\n                corrResults <- cor(frame$nitrate, frame$sulfate)        \n                #}\n                #print(corrResults)\n                allEntries <- append(allEntries, corrResults)\n            }    \n        } else {\n            allEntries <- vector(mode=\"numeric\", length=0)\n        }\n        ##d <- data.frame(allEntries)\n        ##corr(d)\n        #d <- data.frame(data[1],data[2])\n        #corr(d)\n    } else {\n        allEntries <- vector(mode=\"numeric\", length=0)\n    }\n    allEntries\n    #corrResults\n}\n\nfilesWithCompleteCases <- function(directory, threshold = 0) {\n    ## 'directory' is a character vector of length 1 indicating\n    ## the location of the CSV files\n    \n    ## 'threshold' is a numeric vector of length 1 indicating the\n    ## number of completely observed observations (on all\n    ## variables) required to compute the correlation between\n    ## nitrate and sulfate; the default is 0\n    \n    ## Return a numeric vector of correlations\n    ## NOTE: Do not round the result!\n    completeCounts <- complete(directory)\n    notvalid <- is.na(completeCounts[,2])\n    completeValidCounts <- completeCounts[!notvalid,]\n    aboveThreshold <- completeValidCounts[,2] > threshold\n    counts <- table(aboveThreshold)[\"TRUE\"]\n    \n    #print(is.na(counts))\n    if (!is.na(counts)) {\n        completeAboveCounts <- completeValidCounts[aboveThreshold,]\n    } else {\n        completeAboveCounts <- c()\n    }\n    completeAboveCounts   \n}    \n\ngetCompleteCases <- function(directory, id = 1:332) {\n    allEntries <- c()\n    valid <- c()\n    goodEntries <- c()\n    data <- c()\n    for (monitor in id) {\n        if (monitor < 10) {\n            monitorFile <- paste(\"00\",monitor, sep = \"\")\n        } else if (monitor < 100) {\n            monitorFile <- paste(\"0\",monitor, sep = \"\")\n        } else {\n            monitorFile <- monitor\n        }   \n        fileComp <- paste(directory,\"/\",monitorFile,\".csv\",sep = \"\")\n        ##print(fileComp)\n        if (file.exists(fileComp) == TRUE) {\n            monitorData <- read.csv(fileComp, header = TRUE, sep = \",\")    \n        } else {\n            monitorData <- c()\n        }\n        \n        ## Retrieve only the nitrate/sulfate data\n        entries <- monitorData[,2:3]\n        \n        if (length(monitorData) > 0) {\n            valid <- complete.cases(entries)\n            #notvalid <- is.na(entries)\n            goodEntries <- entries[valid,]\n            ##totalMean <- append(totalMean,mean(goodEntries))\n            allEntries <- append(allEntries, goodEntries)\n        }    \n        ##totalMean\n        #allEntries\n        ##allEntries <- append(allEntries, goodEntries)\n    }\n    ##mean(allEntries)\n    \n    #allEntries\n    data <- data.frame(allEntries[1],allEntries[2])\n    data\n    #goodEntries\n    #notvalid\n}\n\ngetCompleteCasesWithThreshold <- function(directory, threshold = 0, id = 1:332) {\n    allEntries <- c()\n    valid <- c()\n    goodEntries <- c()\n    data <- c()\n    for (monitor in id) {\n        if (monitor < 10) {\n            monitorFile <- paste(\"00\",monitor, sep = \"\")\n        } else if (monitor < 100) {\n            monitorFile <- paste(\"0\",monitor, sep = \"\")\n        } else {\n            monitorFile <- monitor\n        }   \n        fileComp <- paste(directory,\"/\",monitorFile,\".csv\",sep = \"\")\n        ##print(fileComp)\n        if (file.exists(fileComp) == TRUE) {\n            monitorData <- read.csv(fileComp, header = TRUE, sep = \",\")    \n        } else {\n            monitorData <- c()\n        }\n        \n        ## Retrieve only the nitrate/sulfate data\n        entries <- monitorData[,2:3]\n        \n        if (length(monitorData) > 0) {\n            valid <- complete.cases(entries)\n            #notvalid <- is.na(entries)\n            goodEntries <- entries[valid,]\n            if (length(goodEntries) > 0) {\n                goodEntries <- goodEntries[1:threshold,]\n            }\n            ##totalMean <- append(totalMean,mean(goodEntries))\n            allEntries <- append(allEntries, goodEntries)\n        }    \n        ##totalMean\n        #allEntries\n        ##allEntries <- append(allEntries, goodEntries)\n    }\n    ##mean(allEntries)\n    \n    #allEntries\n    data <- data.frame(allEntries[1],allEntries[2])\n    data\n    #goodEntries\n    #notvalid\n}",
    "created" : 1444879230414.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1096983998",
    "id" : "624A6C13",
    "lastKnownWriteTime" : 1445271338,
    "path" : "~/git/R/week2/corr.R",
    "project_path" : "corr.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}