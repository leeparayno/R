{
    "contents" : "# train <- mergeDataset(\"~/git/R/Getting_and_Cleaning_Data/class_project/UCI HAR Dataset/train\", \n# \"~/git/R/Getting_and_Cleaning_Data/class_project/UCI HAR Dataset/test\", \n# \"~/git/R/Getting_and_Cleaning_Data/class_project/UCI HAR Dataset/features.txt\", \n# \"~/git/R/Getting_and_Cleaning_Data/class_project/UCI HAR Dataset/activity_labels.txt\")\n#\n# This script requires the following R libraries:\n#   * dplyr\n#   * plyr\n# These libraries need to be installed prior to use\n#\nlibrary(dplyr) \nlibrary(plyr)\n\n# Data from the UCI Human Activity Recognition project\n# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones\n#\n# mergeDataset - function\n#   Arguments:  trainDir - path to the directory where the training data set for the \n#                           UCI Human Activity Recognition project\n#               testDir - path to the directory where the test data set is\n#               featuresFile - path to the features file detailing all the features\n#                               in the data file set\n#               activityLabelFile - path to the file that lists all the activities \n#                                   performed by the subjects in the study\n#\n#   Returns:    A data frame that has been properly formated with combined data from\n#               the train and test data sets, with cleaned feature names and properly\n#               assigned activity labels\n#   Purpose:    This function will combine the data sets for the training and test\n#               data sets into one combined data frame, with clean feature column names.\n#               The data frame will also be subsetted to include the mean and \n#               standard deviation values in the original data set, and have all activities\n#               labeled descriptively\nmergeDataset <- function(trainDir, testDir, featuresFile = NULL, activityLabelFile = NULL) {\n    if (is.null(featuresFile)) {\n        stop(\"featuresFile argument is required.  Should be the path to the file \n             detailing the features of the data set\")\n    }\n    if (is.null(activityLabelFile)) {\n        stop(\"activityLabelFile argument is required.  Should be the path to the file \n             detailing the activities performed by the subjects in the data set\")\n    }\n    # Load the activity labels from files\n    activityLabels <- read.table(activityLabelFile, header = FALSE, col.names = c(\"activity\", \"activity_name\"))\n    \n    # Pass the features file to be cleaned and returned as a feature of all \n    # the features in the data set\n    features <- cleanFeatureLabels(featuresFile)\n    \n    # Load the training data set's activity identifiers\n    trainActivityFile <- paste(trainDir,\"/y_train.txt\", sep = \"\")\n    trainActivityX <- read.table(trainActivityFile, header = FALSE, col.names = c(\"activity\"))\n    trainActivityX <- trainActivityX[,1]\n    \n    # Load the subject file for the training data set\n    trainSubjectFile <- paste(trainDir,\"/subject_train.txt\", sep = \"\")\n    trainSubjectX <- read.table(trainSubjectFile, header = FALSE)\n    trainSubjectX <- trainSubjectX[,1]\n    \n    # Load the training data \n    trainDataX <- paste(trainDir,\"/X_train.txt\", sep = \"\")\n    trainX <- read.table(trainDataX, header = FALSE, sep = \"\", skip = 0, col.names = features[,2])\n    \n    # Define all the features that we want to preserve\n    trainX <- trainX[,c(1:6,41:46,81:86,121:126,161:166,201:202,214:215,227:228,240:241,253:254,266:271,345:350,424:429,503:504,516:517,529:530,542:543)]\n    \n    # Combine subjects to the data, and merge the data with the activity labels \n    fullTrainX <- data.frame(subject = trainSubjectX, activity = trainActivityX, trainX)\n    fullTrainX <- merge(fullTrainX, activityLabels, by = \"activity\")\n    \n    # Fix labeling and remove activity keys\n    fullTrainX[,1] <- fullTrainX[,69]\n    fullTrainX <- fullTrainX[,1:68]\n    \n    # Load the test data set's activity identifiers\n    testActivityFile <- paste(testDir,\"/y_test.txt\", sep = \"\")\n    testActivityX <- read.table(testActivityFile, header = FALSE, col.names = c(\"activity\"))\n    testActivityX <- testActivityX[,1]\n    \n    # Load the subject file for the test data set\n    testSubjectFile <- paste(testDir,\"/subject_test.txt\", sep = \"\")\n    testSubjectX <- read.table(testSubjectFile, header = FALSE)\n    testSubjectX <- testSubjectX[,1]\n    \n    # Load the test data \n    testDataX <- paste(testDir,\"/X_test.txt\", sep = \"\")\n    #testX <- read.fwf(testDataX, c(rep.int(16,561)), header = FALSE, sep = \"\\t\", skip = 0, col.names = features[,2])\n    testX <- read.table(testDataX, header = FALSE, sep = \"\", skip = 0, col.names = features[,2])\n    \n    # Define all the features that we want to preserve\n    testX <- testX[,c(1:6,41:46,81:86,121:126,161:166,201:202,214:215,227:228,240:241,253:254,266:271,345:350,424:429,503:504,516:517,529:530,542:543)]\n    \n    # Combine subjects to the data, and merge the data with the activity labels \n    fullTestX <- data.frame(subject = testSubjectX, activity = testActivityX, testX)\n    fullTestX <- merge(fullTestX, activityLabels, by = \"activity\")    \n    \n    # Fix labeling and remove activity keys\n    fullTestX[,1] <- fullTestX[,69]\n    fullTestX <- fullTestX[,1:68]\n    \n    # Combine the processed train and test data sets    \n    complete <- bind_rows(fullTrainX, fullTestX)\n\n    complete\n}\n\n# cleanFeatureLabels - function\n#   Arguments:  featuresFile - path to the file listing all the features in the\n#                               data set\n#   Returns:    vector of feature names with no punctuation and more meaniful names\n#   Purpose:    This function will clean some of the stray punctuation that could cause\n#               issues with other code. It also replaces some abbreviations to make\n#               the feature names more meaningful\ncleanFeatureLabels <- function(featuresFile = NULL) {\n    if (is.null(featuresFile)) {\n        stop(\"Features file is required\")\n    }\n    \n    # Load the features file\n    features <- read.table(featuresFile, header = FALSE, col.names = c(\"feature_number\", \"feature\"))\n    \n    features$feature <- as.character(features$feature)\n    \n    # Remove the parenthesis\n    features$feature <- gsub(\"\\\\)\",\"\",features$feature);\n    features$feature <- gsub(\"\\\\(\",\"\",features$feature);\n    \n    # Change f to Freq\n    features$feature <- gsub(\"^f\",\"Freq\",features$feature);\n    \n    # Change t to Time\n    features$feature <- gsub(\"^t\",\"Time\",features$feature);\n    \n    features\n}\n\n# createAverageOfMeanSTD - function\n#   Arguments:  data (required) - must be a data.frame with all the raw data records as processed \n#                       by mergeDataset\n#               outputFile - optional path to write the summarized data table to a file\n#   Returns: data.frame of summarized mean values\n#   Purpose: Process the mean of all the values after grouping by activity and subject\n#\ncreateAverageOfMeanSTD <- function(data = NULL, outputFile = \"averageOfMeanSTD.txt\") {\n    if (is.null(data)) {\n        stop(\"data argument is required.  Should be a data frame of means and standard \n             deviation\")\n    }\n    #R1 <- do.call(\"rbind\", as.list(\n    #    by(data, data[\"subject\"], transform, avg=mean(TimeBodyAcc.std.Y))\n    #))\n    cols <- colnames(data)\n    #columns\n    #c(mean(df$TimeBodyAcc.mean.X),mean(df$TimeBodyAcc.mean.Y))\n    average <- ddply(data, c(\"activity\",\"subject\"), function(df) { \n        c(mean(df$TimeBodyAcc.mean.X),\n          mean(df$TimeBodyAcc.mean.Y), \n          mean(df$TimeBodyAcc.mean.Z),\n          mean(df$TimeBodyAcc.std.X),\n          mean(df$TimeBodyAcc.std.Y),\n          mean(df$TimeBodyAcc.std.Z),\n          mean(df$TimeGravityAcc.mean.X), \n          mean(df$TimeGravityAcc.mean.Y),\n          mean(df$TimeGravityAcc.mean.Z),\n          mean(df$TimeGravityAcc.std.X),\n          mean(df$TimeGravityAcc.std.Y),\n          mean(df$TimeGravityAcc.std.Z), \n          mean(df$TimeBodyAccJerk.mean.X),\n          mean(df$TimeBodyAccJerk.mean.Y),\n          mean(df$TimeBodyAccJerk.mean.Z),\n          mean(df$TimeBodyAccJerk.std.X),\n          mean(df$TimeBodyAccJerk.std.Y), \n          mean(df$TimeBodyAccJerk.std.Z),\n          mean(df$TimeBodyGyro.mean.X),\n          mean(df$TimeBodyGyro.mean.Y),\n          mean(df$TimeBodyGyro.mean.Z),\n          mean(df$TimeBodyGyro.std.X), \n          mean(df$TimeBodyGyro.std.Y),\n          mean(df$TimeBodyGyro.std.Z),\n          mean(df$TimeBodyGyroJerk.mean.X),\n          mean(df$TimeBodyGyroJerk.mean.Y),\n          mean(df$TimeBodyGyroJerk.mean.Z), \n          mean(df$TimeBodyGyroJerk.std.X),\n          mean(df$TimeBodyGyroJerk.std.Y),\n          mean(df$TimeBodyGyroJerk.std.Z),\n          mean(df$TimeBodyAccMag.mean),\n          mean(df$TimeBodyAccMag.std), \n          mean(df$TimeGravityAccMag.mean),\n          mean(df$TimeGravityAccMag.std),\n          mean(df$TimeBodyAccJerkMag.mean),\n          mean(df$TimeBodyAccJerkMag.std),\n          mean(df$TimeBodyGyroMag.mean), \n          mean(df$TimeBodyGyroMag.std),\n          mean(df$TimeBodyGyroJerkMag.mean),\n          mean(df$TimeBodyGyroJerkMag.std),\n          mean(df$FreqBodyAcc.mean.X),\n          mean(df$FreqBodyAcc.mean.Y), \n          mean(df$FreqBodyAcc.mean.Z),\n          mean(df$FreqBodyAcc.std.X),\n          mean(df$FreqBodyAcc.std.Y),\n          mean(df$FreqBodyAcc.std.Z),\n          mean(df$FreqBodyAccJerk.mean.X), \n          mean(df$FreqBodyAccJerk.mean.Y),\n          mean(df$FreqBodyAccJerk.mean.Z),\n          mean(df$FreqBodyAccJerk.std.X),\n          mean(df$FreqBodyAccJerk.std.Y),\n          mean(df$FreqBodyAccJerk.std.Z), \n          mean(df$FreqBodyGyro.mean.X),\n          mean(df$FreqBodyGyro.mean.Y),\n          mean(df$FreqBodyGyro.mean.Z),\n          mean(df$FreqBodyGyro.std.X),\n          mean(df$FreqBodyGyro.std.Y),\n          mean(df$FreqBodyGyro.std.Z),\n          mean(df$FreqBodyAccMag.mean),\n          mean(df$FreqBodyAccMag.std),\n          mean(df$FreqBodyBodyAccJerkMag.mean),\n          mean(df$FreqBodyBodyAccJerkMag.std),\n          mean(df$FreqBodyBodyGyroMag.mean),\n          mean(df$FreqBodyBodyGyroMag.std),\n          mean(df$FreqBodyBodyGyroJerkMag.mean),\n          mean(df$FreqBodyBodyGyroJerkMag.std)\n          )\n        } )\n    colnames(average) <- cols\n    average\n    #write.table(average, file = outputFile)\n}\n\n\n",
    "created" : 1447692452522.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "292876179",
    "id" : "8030E7CE",
    "lastKnownWriteTime" : 1448178791,
    "path" : "~/git/R/Getting_and_Cleaning_Data/class_project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "type" : "r_source"
}